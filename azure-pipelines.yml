pool:
  vmImage: 'Ubuntu-16.04'
  demands:
    - npm

#Display build info  
steps:  
- script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)"'
  displayName: 'Write build info'
  
#Config use of .NET Core SDK 2.1.505
- task: DotNetCoreInstaller@0
  displayName: 'Use .NET Core SDK 2.1.505'
  inputs:
    version: 2.1.505

#Run npm install
- task: Npm@1
  displayName: 'Run npm install'
  inputs:
    verbose: false  

#Compile Sass assets
- script: './node_modules/.bin/node-sass Tailspin.SpaceGame.Web/wwwroot --output Tailspin.SpaceGame.Web/wwwroot'
  displayName: 'Compile Sass assets'

#Run gulp tasks
- task: gulp@1
  displayName: 'Run gulp tasks'

#Send build info to file 'build-info.txt'
- script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > build-info.txt'
  displayName: 'Write build info'
  workingDirectory: Tailspin.SpaceGame.Web/wwwroot

#Install, the project's dependencies
- task: DotNetCoreCLI@2
  displayName: 'Restore project dependencies'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

#Build the project
- task: DotNetCoreCLI@2
  displayName: 'Build the project - Release'
  inputs:
    command: 'build'
    arguments: '--no-restore --configuration Release'
    projects: '**/*.csproj'

#Package the application's build results (including its dependencies) into a folder. 
#The zipAfterPublish argument specifies to add the built results to a .zip file
- task: DotNetCoreCLI@2
  displayName: 'Publish the project - Release'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--no-build --configuration Release --output $(Build.ArtifactStagingDirectory)/Release'
    zipAfterPublish: true

#Publish the .zip file to Azure Pipelines
#succeeded() is the default condition, so you don't need to specify it
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  condition: succeeded(
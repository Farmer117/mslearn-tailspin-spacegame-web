# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- '*'

pool:
  vmImage: 'ubuntu-20.04'
  demands:
  - npm

variables:
  buildConfiguration: 'Release'

steps:
- task: UseDotNet@2
  displayName: 'Use .NET SDK 6.x'
  inputs:
    packageType: sdk
    version: '6.x'

- task: Npm@1
  displayName: 'Run npm install'
  inputs:
    verbose: false

- script: './node_modules/.bin/node-sass Tailspin.SpaceGame.Web/wwwroot --output Tailspin.SpaceGame.Web/wwwroot'
  displayName: 'Compile Sass assets'

- task: gulp@1
  displayName: 'Run gulp tasks'

- script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
  displayName: 'Write build info'
  workingDirectory: Tailspin.SpaceGame.Web/wwwroot

- task: DotNetCoreCLI@2
  displayName: 'Restore project dependencies'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build the project - Release'
  inputs:
    command: 'build'
    arguments: '--no-restore --configuration Release'
    projects: '**/*.csproj'

# Avsnittet demands under pool anger att du behöver npm, den Node.js pakethanteraren, 
# installerad på byggsystemet.

# I avsnittet steps visas de bygguppgifter som mappar till vart och ett av de skriptkommandon 
# som vi identifierade tidigare.

# Azure Pipelines tillhandahåller inbyggda bygguppgifter som mappar till många vanliga byggaktiviteter. 
# Till exempel mappar uppgiften DotNetCoreCLI@2 till kommandoradsverktyget dotnet. Pipelinen använder 
# DotNetCoreCLI@2 två gånger: en gång för att återställa eller installera projektets beroenden och en 
# gång för att skapa projektet.

# Kom ihåg att inte alla byggaktiviteter mappar till en inbyggd uppgift. Det finns till exempel ingen 
# inbyggd uppgift som kör verktyget node-Sass eller skriver bygginformation till en textfil. 
# Om du vill köra allmänna systemkommandon använder du uppgiften CmdLine@2 eller script. 
# Pipelinen använder uppgiften script eftersom den är en vanlig genväg för CmdLine@2.

- task: DotNetCoreCLI@2
  displayName: 'Publish the project - Release'
  inputs:
    command: 'publish'
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--no-build --configuration Release --output $(Build.ArtifactStagingDirectory)/Release'
    zipAfterPublish: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  condition: succeeded()

# Den första aktiviteten använder DotNetCoreCLI@2 uppgiften för att publicera eller paketera 
# appens byggresultat (inklusive dess beroenden) i en mapp. 
# Argumentet zipAfterPublish anger att byggresultatet ska läggas till i en .zip-fil.

# Den andra uppgiften använder uppgiften PublishBuildArtifacts@1 för att publicera .zip-filen 
# till Azure Pipelines. Argumentet condition anger att uppgiften endast ska köras när den 
# föregående uppgiften lyckas. succeeded() är standardvillkoret, så du behöver inte ange det. 
# Men vi visar det här för att visa dess användning.    
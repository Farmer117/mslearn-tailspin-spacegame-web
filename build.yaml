#!/bin/bash

# Install Node.js modules as defined in package.json.
#npm install --quiet

# Compile Sass (.scss) files to standard CSS (.css).
#node-sass Tailspin.SpaceGame.Web/wwwroot

# Minify JavaScript and CSS files.
#gulp

# Print the date to wwwroot/buildinfo.txt.
#echo `date` > Tailspin.SpaceGame.Web/wwwroot/buildinfo.txt

# Install the latest .NET packages the app depends on.
#dotnet restore
#DotNetCoreCLI@2

# Build the app under the Debug configuration.
##dotnet build --configuration Debug

# Publish the build to the /tmp directory.
#dotnet publish --no-build --configuration Debug --output /tmp/Debug

# Build the app under the Release configuration.
#dotnet build --configuration Release

# Publish the build to the /tmp directory.
#dotnet publish --no-build --configuration Release --output /tmp/Release

steps:
- task: Npm@1
  displayName: Instalacion dependencias
  command: 'install'
  verbose: quiet
- script: node-sass Tailspin.SpaceGame.Web/wwwroot
  displayname: Scrip personalizado node-sass
- task: gulp@1
  gulpFile: 'gulpfile.js'
- script: echo 'date' > Tailspin.SpaceGame.Web/wwwroot/buildinfo.txt
- task: DotNetCoreCLI@2
  displayname: restore
  inputs:
    command: restore
    projects: '**/*.csproj'
- task: DotNetCoreCLI@2
  displayName: Build debug
  inputs:
    command: build
    projects: '**/*.csproj'
    arguments: '--configuration Debug'
- task: DotNetCoreCLI@2
  displayName: no build
  inputs:
    command: build
    projects: '**/*.csproj'
    arguments: '--configuration Debug'
- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: False
    arguments: '--no-build --configuration Debug --output /tmp/Release'
    zipAfterPublish: False
- task: DotNetCoreCLI@2
  displayName: Build release
  inputs:
    command: build
    projects: '**/*.csproj'
    arguments: '--configuration Release'
- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: False
    arguments: '--no-build --configuration Release --output /tmp/Release'
    zipAfterPublish: False
